from itertools import zip_longest

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message,
)

from src.core.config import BOT_TOKEN
from src.repository.repository import AsyncSessionLocal
from src.service.service import (
    add_stats_service,
    fight_with_log_service,
    get_or_create_user_service,
    resset_stats_service,
    set_stats_service,
)

dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(m: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user_service(
            m.from_user.id, m.from_user.first_name, session)  # type: ignore
        if not user:
            await m.answer("‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        await m.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø inline-–±–æ—Ç –¥—É—ç–ª–µ–π.\n\n"
            "–ù–∞–ø–∏—à–∏ –≤ –ª—é–±–æ–º —á–∞—Ç–µ: <code>@AdventureeeeBot</code> –∏ –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–æ—á–∫—É.\n"
            "–õ—é–±–æ–π –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤¬ª, –∏ —è —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è.\n\n"
            "–ú–æ–∂–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –ª–∏—á–∫—É –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
            "<code>/setstats STR AGI INT</code> ‚Äî –∑–∞–¥–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n"
            "<code>/profile</code> ‚Äî –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "<code>/resetstats</code> - —Å–±—Ä–æ—Å–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
            parse_mode=ParseMode.HTML,
        )


@dp.message(Command("profile"))
async def cmd_profile(m: Message):
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user_service(
            m.from_user.id, m.from_user.first_name, session)  # type: ignore
        if not user:
            await m.answer("‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        await m.answer(
            f"<b>{user.name}</b>\n"
            f"STR <code>{user.STR}</code> AGI <code>{user.AGI}</code> INT <code>{user.INT}</code> HP <code>{user.HP}</code>\n"
            f"POINT <code>{user.POINT}</code>  FREE POINT <code>{user.FREE_POINT}</code>",
            parse_mode=ParseMode.HTML,
        )


@dp.message(Command("setstats"))
async def cmd_setstats(m: Message):
    user = await get_or_create_user_service(m.from_user.id, m.from_user.first_name)
    list_stats = m.text.split()

    if len(list_stats) not in (2, 3, 4):
        await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/setstats STR AGI INT`", parse_mode=ParseMode.HTML)
        return

    try:
        stats_kwargs = dict(zip_longest(
            ('strength', 'agility', 'intelligence'),
            [int(stat) for stat in list_stats[1:]],
            fillvalue=0),
        )

        result = await set_stats_service(
            user_id=user.user_id,
            user_name=user.name,
            **stats_kwargs,
        )
        if not result:
            await m.answer("‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        user = await get_or_create_user_service(m.from_user.id, m.from_user.first_name)
        await m.reply("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.\n"
                      f"*{user.name}* ‚Üí STR <code>{user.STR}</code> AGI <code>{user.AGI}</code> INT <code>{user.INT}</code>",
                      parse_mode=ParseMode.HTML)
    except ValueError:
        await m.reply("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏.", parse_mode=ParseMode.HTML)


#–£–®–ï–õ –í –¢–£–ê–õ–ï–¢ –©–ê –ë–£–î–£

@dp.message(Command("resetstats"))
async def cmd_setstats(m: Message):
    result = await resset_stats_service(user_id=m.from_user.id)
    if result:
        await m.reply("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.", parse_mode=ParseMode.HTML)
        return
    await m.reply("‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.  –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", parse_mode=ParseMode.HTML)
    return


@dp.inline_query()
async def inline_duel(query: InlineQuery):
    text = (query.query or "").strip().lower()
    if text != "–¥—É—ç–ª—å":
        return

    challenger = query.from_user
    challenger_user = await get_or_create_user_service(user_id=challenger.id, user_name=challenger.first_name)
    if not challenger_user:
        return

    result_id = str(uuid.uuid4())
    message_text = f"‚öîÔ∏è {challenger.full_name} –±—Ä–æ—Å–∏–ª –≤—ã–∑–æ–≤ —á–∞—Ç—É!"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"accept:{challenger.id}")],
        ],
    )

    item = InlineQueryResultArticle(
        id=result_id,
        title="–í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å",
        description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ —á–∞—Ç—É",
        input_message_content=InputTextMessageContent(
            message_text=message_text,
            parse_mode="Markdown",
        ),
        reply_markup=kb,
    )

    await query.answer([item], cache_time=1, is_personal=False)


@dp.callback_query(F.data.startswith("accept:"))
async def on_accept(cq: CallbackQuery, bot: Bot):
    try:
        _, challenger_id_str = cq.data.split(":")
        challenger_id = int(challenger_id_str)
    except Exception:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –¥—É—ç–ª–∏ (A)
    challenger_user = types.User(id=challenger_id, is_bot=False, first_name=f"user_{challenger_id}")
    challenger_user = await get_or_create_user_service(user_id=challenger_user.id, user_name=challenger_user.first_name)

    # –ü—Ä–∏–Ω—è–≤—à–∏–π –¥—É—ç–ª—å (B) ‚Äî —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    accept_user = await get_or_create_user_service(user_id=cq.from_user.id, user_name=cq.from_user.first_name)
    if not accept_user:
        await cq.answer("‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.  –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", show_alert=True)

    # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–≤–æ–π –∂–µ –≤—ã–∑–æ–≤
    if challenger_user.user_id == accept_user.user_id:
        await cq.answer("–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ üòÖ", show_alert=True)
        return

    # –ü—Ä–æ–≤–æ–¥–∏–º –±–æ–π
    winner = fight_with_log_service(challenger_user, accept_user, rng=random)
    if not winner:
        result_text = (
            "‚öîÔ∏è –ò—Å—Ö–æ–¥ –±–æ—è –Ω–∏—á—å—è —è –≤ –ê–•–£–ï –∫–∞–∫ —Ç–∞–∫ –≤—ã—à–ª–æ"
        )
        if cq.inline_message_id:
            try:
                await bot.edit_message_text(
                    inline_message_id=cq.inline_message_id,
                    text=result_text,
                    parse_mode="Markdown",
                )
            except Exception:
                await cq.answer("‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
                return
        else:
            try:
                await bot.edit_message_text(
                    chat_id=cq.message.chat.id,
                    message_id=cq.message.message_id,
                    text=result_text,
                    parse_mode="Markdown",
                )
            except Exception:
                await cq.answer("‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
                return
    else:
        result_text = (
            f"‚öîÔ∏è {winner.name} –ø–æ–±–µ–¥–∏–ª"
        )
        result = await add_stats_service(winner.user_id)
        if result:
            if cq.inline_message_id:
                try:
                    await bot.edit_message_text(
                        inline_message_id=cq.inline_message_id,
                        text=result_text,
                        parse_mode="Markdown",
                    )
                except Exception:
                    await cq.answer("‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
                    return
            else:
                try:
                    await bot.edit_message_text(
                        chat_id=cq.message.chat.id,
                        message_id=cq.message.message_id,
                        text=result_text,
                        parse_mode="Markdown",
                    )
                except Exception:
                    await cq.answer("‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
                    return
        else:
            result_text = (
                f"‚öîÔ∏è {winner.name} –ø–æ–±–µ–¥–∏–ª\n"
                f"–Ω–æ –±–∞–ª—ã –Ω–µ –ø–æ–ª—É—á–∏–ª"
            )
            try:
                await bot.edit_message_text(
                    inline_message_id=cq.inline_message_id,
                    text=result_text,
                    parse_mode="Markdown",
                )
            except Exception:
                await cq.answer("‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
                return


async def main():
    bot = Bot(BOT_TOKEN)
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
