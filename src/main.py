
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message,
)

from src.core.config import BOT_TOKEN
from src.service.service import get_or_create_user_service, set_stats_service

dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(m: Message):
    user = await get_or_create_user_service(m.from_user.id, m.from_user.first_name)
    if not user:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø inline-–±–æ—Ç –¥—É—ç–ª–µ–π.\n\n"
        "–ù–∞–ø–∏—à–∏ –≤ –ª—é–±–æ–º —á–∞—Ç–µ: <code>@AdventureeeeBot</code> –∏ –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–æ—á–∫—É.\n"
        "–õ—é–±–æ–π –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤¬ª, –∏ —è —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è.\n\n"
        "–ú–æ–∂–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –ª–∏—á–∫—É –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
        "<code>/setstats STR AGI INT</code> ‚Äî –∑–∞–¥–∞—Ç—å —Å—Ç–∞—Ç—ã\n"
        "<code>/profile</code> ‚Äî –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        parse_mode=ParseMode.HTML,
    )


@dp.message(Command("profile"))
async def cmd_profile(m: Message):
    user = await get_or_create_user_service(m.from_user.id, m.from_user.first_name)
    if not user:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    await m.answer(
        f"<b>{user.name}</b>\n"
        f"STR <code>{user.STR}</code> AGI <code>{user.AGI}</code> INT <code>{user.INT}</code> HP <code>{user.HP}</code>\n"
        f"POINT <code>{user.POINT}</code>  FREE POINT <code>{user.FREE_POINT}</code>",
        parse_mode=ParseMode.HTML,
    )


@dp.message(Command("setstats"))
async def cmd_setstats(m: Message):
    user = await get_or_create_user_service(m.from_user.id, m.from_user.first_name)
    list_stats = m.text.split()

    if len(list_stats) not in (2, 3, 4):
        await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/setstats STR AGI INT`", parse_mode=ParseMode.HTML)
        return

    try:
        if len(list_stats) == 2:
            s = int(list_stats[-1])
            a = 0
            i = 0
        elif len(list_stats) == 3:
            s, a = map(int, list_stats[1:])
            i = 0
        else:
            s, a, i = map(int, list_stats[1:])

        result = await set_stats_service(
            user_id=user.user_id,
            user_name=user.name,
            s=s,
            a=a,
            i=i,
        )
        if not result:
            await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å stats. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        user = await get_or_create_user_service(m.from_user.id, m.from_user.first_name)
        await m.reply("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.\n"
                      f"*{user.name}* ‚Üí STR <code>{user.STR}</code> AGI <code>{user.AGI}</code> INT <code>{user.INT}</code>",
                      parse_mode=ParseMode.HTML)
    except ValueError:
        await m.reply("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏.", parse_mode=ParseMode.HTML)


#–£–®–ï–õ –í –¢–£–ê–õ–ï–¢ –©–ê –ë–£–î–£


'''
# =========================
# INLINE: "via @bot"
# =========================
@dp.inline_query()
async def inline_duel(query: InlineQuery):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: @YourBot <—Ç–µ–∫—Å—Ç>
    –ú—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ¬´–í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å¬ª.
    –í —Å–∞–º—É –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∞–¥—ë–º –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤¬ª.
    –í callback_data –ø–µ—Ä–µ–¥–∞—ë–º id –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ (—á—Ç–æ–±—ã –≤ –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –∑–Ω–∞—Ç—å ¬´–∫—Ç–æ –≤—ã–∑–≤–∞–ª¬ª).
    """
    challenger = query.from_user
    get_or_create_user(challenger)  # —á—Ç–æ–±—ã –±—ã–ª–∏ —Å—Ç–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    opponent_hint = (query.query or "").strip() or "–∫–æ–≥–æ-–Ω–∏–±—É–¥—å"
    result_id = str(uuid.uuid4())

    # –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤¬ª ‚Äî –Ω–∞–∂–∏–º–∞–µ—Ç –ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"accept:{challenger.id}")]
    ])

    msg_text = f"‚öîÔ∏è {challenger.full_name} –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å *{opponent_hint}*!"
    item = InlineQueryResultArticle(
        id=result_id,
        title="–í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å",
        description=f"–ë—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤ ¬´{opponent_hint}¬ª",
        input_message_content=InputTextMessageContent(msg_text, parse_mode="Markdown"),
        reply_markup=kb
    )

    # cache_time=1 ‚Äî —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è placeholder —Å—Ä–∞–∑—É –ø–æ–¥—Ç—è–≥–∏–≤–∞–ª–∏—Å—å
    await query.answer([item], cache_time=1, is_personal=False)

# =========================
# CALLBACK: –ø—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞
# =========================
@dp.callback_query(F.data.startswith("accept:"))
async def on_accept(cq: CallbackQuery, bot: Bot):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å B –∂–º—ë—Ç ¬´–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤¬ª.
    –í data —Ö—Ä–∞–Ω–∏–º id –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (A). –°—Ä–∞–∂–∞–µ–º A vs B.
    –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ¬´via @YourBot¬ª, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ inline-—Å–æ–æ–±—â–µ–Ω–∏–µ:
    —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ inline_message_id.
    """
    try:
        _, challenger_id_str = cq.data.split(":")
        challenger_id = int(challenger_id_str)
    except Exception:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –¥—É—ç–ª–∏ (A)
    challenger_user = types.User(id=challenger_id, is_bot=False, first_name=f"user_{challenger_id}")
    A = get_or_create_user(challenger_user)

    # –ü—Ä–∏–Ω—è–≤—à–∏–π –¥—É—ç–ª—å (B) ‚Äî —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    B = get_or_create_user(cq.from_user)

    # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–≤–æ–π –∂–µ –≤—ã–∑–æ–≤
    if A.user_id == B.user_id:
        await cq.answer("–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ üòÖ", show_alert=True)
        return

    # –ü—Ä–æ–≤–æ–¥–∏–º –±–æ–π
    winner, battle = fight_with_log(A, B, rng=random)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç (—Å–æ—Ö—Ä–∞–Ω–∏–º ¬´via @bot¬ª ‚Äî –æ–Ω–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –º—ã –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
    result_text = (
        f"‚öîÔ∏è {A.name} –≤—ã–∑–≤–∞–ª –Ω–∞ –¥—É—ç–ª—å *–∫–æ–≥–æ-—Ç–æ*.\n\n"  # –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å
        + fmt_log(battle)
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º inline-—Å–æ–æ–±—â–µ–Ω–∏–µ.
    # –í callback –∏–∑ inline-—Å–æ–æ–±—â–µ–Ω–∏—è TELEGRAM –ø—Ä–∏—Å—ã–ª–∞–µ—Ç inline_message_id.
    if cq.inline_message_id:
        try:
            await bot.edit_message_text(
                inline_message_id=cq.inline_message_id,
                text=result_text,
                parse_mode="Markdown"
            )
        except Exception:
            # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º –∞–ª–µ—Ä—Ç–æ–º.
            await cq.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
            return
    else:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—à–ª–∞ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–µ–¥–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
        try:
            await bot.edit_message_text(
                chat_id=cq.message.chat.id,
                message_id=cq.message.message_id,
                text=result_text,
                parse_mode="Markdown"
            )
        except Exception:
            await cq.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
            return

    await cq.answer("–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
'''


# =========================
# –ó–ê–ü–£–°–ö
# =========================
async def main():
    bot = Bot(BOT_TOKEN)
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
